Notacion Big O -> Peor caso del algoritmo para realizar x acción.
			¿Cuántas veces se accede a la memoria cuando se hace la operación?


     O(1) -> Es constante. El tiempo no depende de la cant de elementos.

     Ejm: calcularCuadradoPrimerElemento(ArrayList<int>() elems){
	  res = elems.get(0) * elems.get(0);
	  return res;
	}


-------------------------------------------------------------

     O(log n) -> Nos indica que el tiempo de ejecución es proporcional a log n.

	int n=8; 	

	for (int i=1; i<n; i=i*2){
   		 System.out.println("Hey - I'm busy looking at: " + i);
	}

	//Imprime 3 veces SO 1 - 2 - 4

-------------------------------------------------------------


     O(n) -> Es proporcional a la cantidad de elementos. (100elem ≠ 10000elem)
		Es lineal.

     Ejm: for(int i=0; i<100; i++)
	  for(int i=0; i<100000; i++)

-------------------------------------------------------------


     O(n²) -> El tiempo de ejecución que insume es proporcional a n²

     Ejem: for(){
		//Operación
		for(){
			//Operación
		      }
		}

-------------------------------------------------------------


     

	
